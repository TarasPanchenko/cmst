/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p roothelper_interface.h: code/roothelper/org.monkey_business_enterprises.roothelper.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ROOTHELPER_INTERFACE_H
#define ROOTHELPER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.cmst.roothelper
 */
class OrgCmstRoothelperInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.cmst.roothelper"; }

public:
    OrgCmstRoothelperInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgCmstRoothelperInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> deleteFile(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("deleteFile"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getFileList(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("getFileList"), argumentList);
    }

    inline QDBusPendingReply<bool> isConnected()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("isConnected"), argumentList);
    }

    inline QDBusPendingReply<QString> readFile(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("readFile"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> saveFile(const QString &in0, const QString &in1, const QString &in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("saveFile"), argumentList);
    }

    inline QDBusPendingReply<> startHelper()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("startHelper"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace cmst {
    typedef ::OrgCmstRoothelperInterface roothelper;
  }
}
#endif
